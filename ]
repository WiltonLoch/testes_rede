
from mininet.net import Mininet
from mininet.util import dumpNodeConnections
import numpy as np

import time
import random

class Politicas:
    @staticmethod
    def aleatoria(rede, carga, alocacoes, matrizPulos):
        origem = random.randrange(len(rede.hosts))
        destino = random.randrange(len(rede.hosts))
        while(destino == origem):
            destino = random.randrange(len(rede.hosts))
        return (origem, destino)

    @staticmethod
    def menorPuloLivre(rede, carga, alocacoes, matrizPulos):
        link_loads = {}
        link_capacity = 1000 * 1000 * 1000
        for i in alocacoes:
            keys = matrizPulos[(i[1], i[2])]
            multiplier = 1000
            if i[-1] == 'M':
                multiplier *= 1000
            elif i[-1] == 'G':
                multiplier *= 1000 * 1000
            for j in keys:
                if not (j[0] + j[1] in link_loads):
                    link_loads[j[0] + j[1]] = (int(i[0][:-1]) * multiplier)/link_capacity
                else:
                    link_loads[j[0] + j[1]] += (int(i[0][:-1]) * multiplier)/link_capacity

        multiplier = 1000
        if carga[-1] == 'M':
            multiplier *= 1000
        elif carga[-1] == 'G':
            multiplier *= 1000 * 1000

        for i in range(len(rede.hosts)):
            for j in range(i, len(rede.hosts)):
                    keys = matrizPulos[(i, j)]
                    for j in keys:
                        if not (j[0] + j[1] in link_loads):
                            link_loads[j[0] + j[1]] = (int(i[0][:-1]) * multiplier)/link_capacity
                        else:
                            link_loads[j[0] + j[1]] += (int(i[0][:-1]) * multiplier)/link_capacity


